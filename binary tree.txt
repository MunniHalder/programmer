#include<stdio.h>
#include<malloc.h>
typedef struct BST
{
    int data;
    struct BST *left ,*right;
}BST;
BST *parent, *delNode;

void insert(BST **root, int n)
{
    if((*root)==NULL)
    {
        BST *temp=(BST*)malloc(sizeof(BST));
        temp->data=n;
        temp->left=temp->right=NULL;
        *root=temp;
    }
    else if((*root)->data>n)
       insert(&((*root)->left),n);
    else
       insert(&((*root)->right),n);

}
int search(BST *root, int num)
{
    if(root==NULL)
    {
        printf("\nEmpty Tree");
        return 0;
    }
    else
    {
        while(1)
        {
            if(root->data==num)
            {
                delNode=root;
                printf("\nValue Found");
                return 1;
            }
            else if(root->data>num)
            {
                parent=root;
                root=root->left;
            }
            else
            {
                parent=root;
                root=root->right;
            }

        }
        printf("\nValue not found");
        return 0;
    }
}
void PreOrder(BST *root)
{
    if(root!=NULL)
    {
        printf("%d\t", root->data);
        PreOrder(root->left);
        PreOrder(root->right);
    }
}

void InOrder(BST *root)
{
    if(root!=NULL)
    {
        InOrder(root->left);
        printf("%d\t", root->data);
        InOrder(root->right);
    }
}
void PostOrder(BST *root)
{
    if(root!=NULL)
    {
        PostOrder(root->left);
        PostOrder(root->right);
        printf("%d\t", root->data);
    }
}
void bst_delete(BST **root)
{
    BST *p=NULL;
    int num;
    while(1)
    {
        if(delNode->left!=NULL && delNode->right!=NULL)
        {
            p=delNode;
            p=p->left;
            while(p->right!=NULL)
            {
                parent=p;
                p=p->right;
            }
            num=delNode->data;
            delNode->data=p->data;
            p->data=num;
            delNode=p;
        }
        else if(delNode->left!=NULL || delNode->right!=NULL)
        {
            if(delNode->left!=NULL)
            {
                if(parent->left==delNode)
                {
                    parent->left=delNode->left;
                    free(delNode);
                    printf("\nValue Deleted");
                    return;
                }
                else
                {
                   parent->right=delNode->left;
                   free(delNode);
                   printf("\nValue Deleted");
                   return;
                }
            }
            else
            {
                if(parent->left==delNode)
                {
                    parent->left=delNode->right;
                    free(delNode);
                    printf("\nValue Deleted");
                    return;
                }
                else
                {
                   parent->right=delNode->right;
                   free(delNode);
                   printf("\nValue Deleted");
                   return;
                }

            }
        }
        else if(delNode->left==NULL && delNode->right==NULL)
        {
                if(parent->left==delNode)
                {
                    parent->left=NULL;
                    free(delNode);
                    printf("\nValue Deleted");
                    return;
                }
                else
                {
                   parent->right=NULL;
                   free(delNode);
                   printf("\nValue Deleted");
                   return;
                }
        }
        else
        {
            printf("\nValue Not Deleted");
            return;
        }

    }
}
int main()
{
    BST *root=NULL;
    parent=delNode=NULL;
    int i,del,res=0;
    int arr[];
    /*while(1)
    {
        scanf("%d",&i);
        if(i==-1)
            break;
        else
            insert(&root,i);
    }*/
    for(i=0;i<9;i++)
        insert(&root,arr[i]);

    printf("\n\nPreOrder Traversal:  \n\n");
    PreOrder(root);
    printf("\n\nInOrder Traversal:  \n\n");
    InOrder(root);
    printf("\n\nPostOrder Traversal:  \n\n");
    PostOrder(root);

    printf("\nEnter value you want to delete:  ");
    scanf("%d",&del);
    res=search(root,del);
    if(res>0)
       bst_delete(&root);
    else
        printf("\nValue Can't be deleted");
    printf("\n\nPreOrder Traversal:  \n\n");
    PreOrder(root);
    return 0;
}